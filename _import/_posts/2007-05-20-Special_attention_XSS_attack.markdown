---
layout: post
title: 特别留意XSS攻击
date: '2007-5-20'
comments: true
categories: Security
link: true
---
跨站点脚本攻击有一个前提：攻击者能够将他们自己编写的JavaScript脚本放进网页，并且这些页面在显示时与他们想要的cookie相关联。幸运的是，这种攻击很容易提防——不要允许任何外来的东西直接显示在页面上就行了[1]。在将任何一个字符串显示在网页上之前，一定要将其中的HTML元字符（“&lt;”和“&gt;”）转换成对应的HTML实体（“&amp;lt;”和 “&amp;gt;”），这样不管攻击者在表单或者URL参数中输入了什么文本，浏览器都只会将其显示为普通文本，不会对其做任何HTML解释。即便不考虑安全问题，你也同样应该考虑这样做，因为如果允许用户输入HTML标签，页面的布局很容易被搞乱。如果使用Textile或者Markdown这样的标记语言，一定要倍加小心，因为它们允许用户在页面上添加HTML片段。Rails提供了h(string)辅助方法（实际上是html_escape()方法的别名），该方法正是用于在Rails视图中执行上述文本替换的。在这个容易遭受攻击的网站里，负责编写“查看留言”功能的人可以将表单写成这样，以消除安全问题：&lt;div class=&quot;comment&quot;&gt;&lt;%= h(order.comment) %&gt;&lt;/div&gt;Joe问……干吗不直接扔掉&lt;script&gt;标签呢？既然问题出在用户可以把&lt;script&gt;标签插进我们显示的内容中，也许你会想，直接把这些标签找到并删除不就是最简单的解决办法吗？可惜，这不管用。浏览器在很多情况下都会执行JavaScript，情况之多也许会令你吃惊。（譬如说， onclick=属性、&lt;img&gt;标签的scr=属性都可以是JavaScript的来源。）而且这也不仅仅是JavaScript的问题 ——如果允许用户在网页上放进超链接，就可能有人用它来干坏事。你可以试着检查所有这些情况，不过相比之下，HTML转义替换的方式要更安全，而且更不容易出错。所以，请养成习惯，在把任何变量放进视图显示之前，使用h()方法对其进行转义替换——即便你认为它来自一个可以信赖的来源。同时，在阅读别人的代码时，也得留意其中使用h()方法的地方——有些人在使用h()方法时喜欢不加括号，这可能让代码变得更加难懂。有时你确实需要把包含HTML的字符串放进视图模板，此时可以使用sanitize()方法，该方法可以去除其中可能造成危险的部分。不过，你最好仔细检查sanitize()方法是否能够提供你所需要的保护：每周都有新的HTML攻击手段出现，令人防不胜防。
