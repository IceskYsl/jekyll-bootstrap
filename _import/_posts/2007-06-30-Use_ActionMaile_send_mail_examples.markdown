---
layout: post
title: 使用ActionMaile发送邮件实例
date: '2007-6-30'
comments: true
categories: Ruby&Rails
link: true
---
来源：http://www.javaeye.com/topic/40778更改config目录下的配置文件*environment.rb* 在最下面追加一段：&lt;code&gt;ActionMailer::Base.delivery_method = :smtp#以简单邮件传送协议发送邮件ActionMailer::Base.default_charset = &quot;GBK&quot;#设置邮件的默认编码为国标码否则发送的邮件主题可能会乱码ActionMailer::Base.server_settings = {:address =&gt; &quot;192.168.1.110&quot;,:port =&gt; 25,:domain =&gt; &quot;xxx.com&quot;,:authentication =&gt; :login,:user_name =&gt; &quot;xxx&quot;,:password =&gt; &quot;xxx&quot;,}&lt;/code&gt;1、:address =&gt; and :port =&gt; 决定你将使用的SMTP的地址和端口。这些缺省值分别为localhost和25。2、:domain =&gt; 当识别自己是服务器时 mailer应该使用的域名。这是对HELO(因为HELO是命令客户端发送服务来启动一个连接)域的调用。你通常应该使用顶级域名机制来发送e-mail，但这依赖于你的SMTP服务的设置(some don’t check, and some check to try to reduce spam and socalled open-relay issues)3、:user_name =&gt; and :password =&gt; 如果:authentication被设置则要求有此。4、:authentication =&gt; :plain，:login，或:cram_md中的一个。你的服务器管理员将帮助选择正确的选项。当前没使用TLS(SSL)来从Rails连接邮件服务器的方式。这个参数应该被忽略，如果你的服务器不要求确认。 创建一个mailer的models&lt;code&gt;class OrderMailer &lt; ActionMailer::Base def signup(domain, sent_at = Time.now)    @subject    = 'Welcome to Beast'    @body       = &quot;hello world&quot;    @recipients = &quot;yyy@yyy.com&quot;    @from = 'yyy@yyy.com'    @sent_on    = sent_at    @headers    = {} endend&lt;/code&gt;@subject:邮件标题@body:邮件正文可以使用html标签但需要设置参考下面@recipients:收件人可以接收数组进行群发多人发送：@recipients = [ &quot;1@a.com&quot;，&quot;2@b.com&quot;]@from:发件人@sent_on:用于设置邮件 Date: header的Time 对象@headers:一个header name/value 对的哈希望表，用于添加任意header行给邮件 如：@headers[&quot;Organization&quot;] = &quot;Pragmatic Programmers, LLC&quot;既要使用HTML格式发送邮件又要增加附件的话，需要在model里就对content-type进行设置 @content-type=”text/html” *创建一个controller 用于发送邮件*def send_maileremail = OrderMailer.deliver_signup(request.host_with_port)Puts email.encoded #邮件内容打印#email = OrderMailer.create_signup(request.host_with_port)#email.set_content_type(&quot;text/html&quot;) 可在模型中设置#OrderMailer.deliver(email)#发送HTML格式的邮件的设置end *发送HTML模板邮件*在views中创建一个模板：_mail_content.rhtml ……model中的mailer类改成如下：def signup(domain,content,sent_at = Time.now)        @subject    = &quot;xxx&quot;        @body       = content        @recipients = &quot;xxx@xxx.com&quot;        @from = 'xxx@xxx.com'        @sent_on    = sent_at        @headers    = {} endcontroller中更改发送方法： def send_mail    content =render_to_string :partial=&gt;&quot; mail_content &quot;email = OrderMailer.create_signup(request.host_with_port,content)           email.set_content_type(&quot;text/html&quot;)            OrderMailer.deliver(email)            render :text=&gt;&quot;发送成功&quot; end render_to_string方法返回的是String 与render不同的是它返回后不会发送给客户端。 *发送附件* 修改model中的mailer类，如下： def signup(domain,content,sent_at = Time.now)        @subject    = &quot;xxx&quot;        @body       = content        @recipients = &quot;xxx@xxx.com&quot;        @from = 'xxx@xxx.com'        @sent_on    = sent_at        @headers    = {}       @data = &quot;&quot;        File.open(&quot;D:\\Tools\\FastAIT.rar&quot;, &quot;rb&quot;) { |fp|            @data&lt;           }       #参数的含义rb表示只读并且以二进制方式创建一个file对象       #不写r会出现丢失数据的问题，发送的附件也就被破坏了``r''	Read-only, starts at beginning of file (default mode).只读，清除原有内容（默认方式）``r+''	Read-write, starts at beginning of file.读写，清除原有内容``w''	Write-only, truncates existing file to zero length or creates a new file for writing.只写，创建一个新的文件覆盖旧的``w+''	Read-write, truncates existing file to zero length or creates a new file for reading and writing.读写，创建一个新的文件覆盖旧的``a''	Write-only, starts at end of file if file exists, otherwise creates a new file for writing.只写，追加``a+''	Read-write, starts at end of file if file exists, otherwise creates a new file for reading and writing.读写，追加``b''	(DOS/Windows only) Binary file mode (may appear with any of the key letters listed above).*二进制模式* attachment :content_type =&gt; &quot;application/rar&quot;,           :filename     =&gt; &quot;FastAIT.rar&quot; ,       :body =&gt; @data end邮件附件的content_type（内容类型表） &quot;.asf&quot;     ContentType = &quot;video/x-ms-asf&quot; &quot;.avi&quot;      ContentType = &quot;video/avi&quot; &quot;.doc&quot;    ContentType = &quot;application/msword&quot; &quot;.zip&quot;     ContentType = &quot;application/zip&quot; &quot;.xls&quot;     ContentType = &quot;application/vnd.ms-excel&quot; &quot;.gif&quot;     ContentType = &quot;image/gif&quot; &quot;.jpg&quot;, &quot;jpeg&quot;        ContentType = &quot;image/jpeg&quot; &quot;.wav&quot;  ContentType = &quot;audio/wav&quot; &quot;.mp3&quot;  ContentType = &quot;audio/mpeg3&quot; &quot;.mpg&quot;, &quot;mpeg&quot;    ContentType = &quot;video/mpeg&quot; &quot;.rtf&quot;     ContentType = &quot;application/rtf&quot; &quot;.htm&quot;, &quot;html&quot;       ContentType = &quot;text/html&quot; &quot;.txt&quot;     ContentType = &quot;text/plain&quot;&quot;.pdf&quot;    ContentType = &quot;application/pdf&quot; 其他      ContentType = &quot;application/octet-stream&quot;
